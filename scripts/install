#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --time --weight=1

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port




# Destinations definitions
	app_data_dir="/home/yunohost.app/$app"
	app_logs_dir="/var/log/$app"
	app_config_file="${app_data_dir}/settings.conf"
	app_pid_file="/var/run/$app/$app.pid"
	app_python_bin="/usr/bin/python"


	
	# Make directories
	mkdir -p $app_data_dir
	mkdir -p $app_install_dir
	
	# Install latest version of app using the fork
	sudo git clone $source $app_install_dir
	
	# Install dependencies (using virtualenv)
	if [[ $(python --version 2>&1) != Python\ 2* ]]; then
		app_python_bin=$app_install_dir/bin/python
		sudo apt-get install -y python-pip python-virtualenv python-dev uwsgi uwsgi-plugin-python
		sudo virtualenv $app_install_dir
		sudo bash -c "source $app_install_dir/bin/activate && pip install cheetah"
	fi
	
	# Create app user
	id -u $app &>/dev/null || sudo useradd --home-dir $app_install_dir --shell /bin/false $app

	# YunoHost multimedia
		# Add yunohost.multimedia directory
		wget -qq https://github.com/YunoHost-Apps/yunohost.multimedia/archive/master.zip
		unzip -qq master.zip
		sudo ./yunohost.multimedia-master/script/ynh_media_build.sh
		# Give write access to the yunohost.multimedia directory so that medusa can move Series to the Series directory
		sudo usermod -a -G multimedia $app
		# Creates the "Movies" subfolder in "Video"
		sudo mkdir -p "/home/yunohost.multimedia/share/Video/Series"
		# Fix permissions
		sudo ./yunohost.multimedia-master/script/ynh_media_build.sh

	# Transmission link: Preferred method is direct RPC link. If not available, switch to watchdir.
	transmission_rpcurl=""
	transmission_rpcpassword=""
	transmission_watchdir=""
	# Check if Transmission is installed
	if [[ -z $(sudo yunohost app list -i -f transmission | grep -v 'apps:') ]]; then
		sudo sed -i "s@__METHOD__@@g"	../conf/medusa.conf	# Disable Transmission Blackhole and RPC
		sudo sed -i "s@__RENAMER__@0@g"		../conf/medusa.conf	# Disable Renamer
	else
		echo "Transmission is installed. Trying to link it to CouchPotato..."
		# Check if the transmission password is in settings
		if [[ -n $(ynh_app_setting_get transmission rpcpassword || true) ]]; then
			echo "Transmission will be linked to medusa directly"
			transmission_rpcurl="$(ynh_app_setting_get transmission path)/transmission"
			transmission_rpcpassword=$(ynh_app_setting_get transmission rpcpassword)
			sudo sed -i "s@__METHOD__@transmission@g"			../conf/medusa.conf	# Enable Transmission RPC
			sudo sed -i "s@__RENAMER__@1@g"		../conf/medusa.conf	# Enable Renamer
			# If transmission uses YunoHost multimedia, use its folder for the renamer
		else
			# Check if transmission has watchdir enabled
			if [[ -n $(ynh_app_setting_get transmission watchdir || true) ]]; then
				echo "Transmission will be linked to medusa with watchdir"
				transmission_watchdir=$(ynh_app_setting_get transmission watchdir)
				sudo sed -i "s@__METHOD__@blackhole@g"			../conf/medusa.conf	# Enable Transmission Blackhole
				sudo sed -i "s@__RENAMER__@1@g"		../conf/medusa.conf	# Enable Renamer
				# If transmission uses YunoHost multimedia, use its folder for the renamer
			else
				echo "Cannot link medusa to Transmission because Transmission has no RPC password or watchdir available."
				sudo sed -i "s@__METHOD__@@g"			../conf/medusa.conf	# Disable Transmission Blackhole and RPC
				sudo sed -i "s@__RENAMER__@0@g"		../conf/medusa.conf	# Disable Renamer
			fi
		fi
	fi

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --time --weight=1

ynh_add_config --template="../conf/medusa.conf" --destination="$app_data_dir/settings.conf"
chmod 400 "$final_path/some_config_file"
chown $app:$app "$final_path/some_config_file"



	
	# Redirect logs directory
	sudo mkdir -p $app_logs_dir
	sudo chown -R $app $app_logs_dir
	sudo chmod +x -R $app_logs_dir
	sudo sed -i "s@self.log_dir =.*@self.log_dir = '$app_logs_dir'@g" $app_install_dir/SickBeard.py



	# Permissions
	sudo chown -R $app:$app $app_install_dir
	sudo chown -R $app:$app $app_data_dir
	
#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --time --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --time --weight=1

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	ynh_permission_update --permission="main" --add="visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
